% given 
% a matrix A in format [t x y w] representing known data
% a matrix B in format [t x y] representing points to interpolate
%
% return a matrix res in format [t x y w] with the same number of rows of 
% B and with w representing interpolated values
%
% if interpolated point is not in the convex hull of the mesh, the row is
% returned as [t x y NaN]
function res = interpolate2D(A,B, dtMesh, Da)
    if(size(A,2) ~= 4)
       error('Matrix A should be in format [t x y w]'); 
    end
    if(size(B,2) ~= 3)
       error('Matrix B should bi in format [t x y]'); 
    end
    res = zeros(size(B,1),4);
	
    %only do time value interpolation and triangulation if it is not
    %already provided
    if nargin == 2
        %collect only distinct sample points
        [D,m1,n1] = unique(A(:,2:3),'rows');

        %collect all times where interpolation is desired
        T = unique(B(:,1));

        %build a matrix relating the time value and distinct point index to the value (at that index at that time)
        for i = 1:size(D,1)
            % this is the rows in A where the coordinates 
            % match the columns in D : A(A(:,2)==D(i,1) & A(:,3)==D(i,2),:)
            Apart =  A(find(n1==i),:);
            if(size(Apart,1) == 1)
                vq = repmat(Apart(:,4),size(T,1),1);
            else
                vq = interp1(Apart(:,1),Apart(:,4),T);

                %set all NaN to the mean value to prevent missing vales in later steps
                avg = mean(vq(~isnan(vq)));
                vq(isnan(vq)) = avg;
            end
            Da(:,i) = vq;
        end

        %perform triangulation and point location
        dtMesh = delaunayTriangulation(D);
    end
    
    
    [pl,bc] = dtMesh.pointLocation(B(:,2:3));
	
    %deal with nulls by creating a vector which is true if value is null
    %Then set rows with nan to an actual index to
    %allow the corner list to be same sized as the input data set
    skipnan = isnan(pl);
	num_skips = sum(skipnan)
    pl(isnan(pl)) = 1;

	%extract values from Da
	
	%find index of each query point's time value
	[~,Qt] = ismember(B(:,1),T);
	
	%get matrix where each row represents simplex corners as an index into D
	Qp = dtMesh(pl,:);
	
	%get values at point 1 in each row by using the time/point indexes as subscripts into Da
	V1 = Da( sub2ind(size(Da),Qt, Qp(:,1) ) );
	
	%same for point 2 of each row
	V2 = Da( sub2ind(size(Da),Qt, Qp(:,2) ) );
	
	%same for point 3 of each row
	V3 = Da( sub2ind(size(Da),Qt, Qp(:,3) ) );
	
	%triVals looks like pl, but instead of indexes of each vertex of the containing simplex
	%it contains the value measured at each vertex of the simplex
	triVals = [V1 V2 V3];
	
	%dot product of the barycentric coordinates and the vertex values
	%is equivalent to the shape function calculation
	Vq = dot(bc',triVals')'; 
	Vq(isnan(pl)) = NaN;
	res = [B Vq];
end